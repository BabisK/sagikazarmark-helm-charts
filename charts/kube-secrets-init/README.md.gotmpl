{{ template "chart.header" . }}

{{ template "chart.versionBadge" . }} {{ template "chart.typeBadge" . }} {{ template "chart.appVersionBadge" . }} {{ template "chart.kubeVersionBadge" . }} {{ template "chart.artifactHubBadge" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "tldr" . }}

## Configuration

### Certificate

Webhooks require CA and TLS certificates to secure communication between the API server and the webhook.
The chart offers the following options for certificate provisioning:

#### Generate (default)

The default option is to let Helm generate the CA and TLS certificates during installation.

This will renew the certificates on each deployment.

```yaml
certificate:
  generate: true
```

#### Using cert-manager

If have [cert-manager](https://cert-manager.io/) installed in your cluster, you can use it to automatically provision and inject certificates.

```yaml
certificate:
  useCertManager: true
  generate: false
```

### Availability and disruptions

Webook disruptions can easily render clusters inoperational by preventing launching new pods leading to unplanned outages.
Kubernetes offers different features to keep that from happening:

- Fine-tune resource requests and limits to help the scheduler placing pods on nodes with enough resources.
- Run multiple replicas for higher availability.
- Spread pods across failure-domains (regions, zones, nodes) for even higher availability.
- Define a [pod distruption budget](https://kubernetes.io/docs/tasks/run-application/configure-pdb/) for voluntary disruptions.

Here is an example configuration for higher availability,
but make sure to customize it to your needs before using it in production:

```yaml
replicas: 3

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 32Mi

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: kube-secrets-init
              app.kubernetes.io/instance: kube-secrets-init

podDisruptionBudget:
  enabled: true
  minAvailable: 2
```

You can further reduce the blast-radius of involuntary disruptions by configuring `namespaceSelector` and/or `objectSelector`
to limit the webhooks to the required namespaces/workloads.

Read more about dealing with disruptions in the [Kubernetes documentation](https://kubernetes.io/docs/concepts/workloads/pods/disruptions/).

## About GKE Private Clusters

When Google configure the control plane for private clusters, they automatically configure VPC peering between your Kubernetes clusterâ€™s network in a separate Google managed project.

The auto-generated rules **only** open ports 10250 and 443 between masters and nodes. This means that to use the webhook component with a GKE private cluster, you must configure an additional firewall rule to allow your masters CIDR to access your webhook pod using the port 8443.

You can read more information on how to add firewall rules for the GKE control plane nodes in the [GKE docs](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#add_firewall_rules).

{{ template "chart.valuesSection" . }}

## Attributions

Forked from [banzaicloud-stable/kube-secrets-init](https://github.com/banzaicloud/banzai-charts/tree/cd93b7049885033c36f5e9551bb39fda7361f835/kube-secrets-init).
